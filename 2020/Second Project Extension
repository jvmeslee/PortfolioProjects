# Machine Learning for prediction
# Author: James Lee
# Date: Dec 7, 2020
# Second Project Extension

from sklearn.linear_model import LinearRegression
import turtle

csvfile = input("Enter your csv file (E.g. filename.csv): ")
predictioncol = input("\nEnter your prediction column: ")
inputcolumns = input("\nEnter your range of indices, From:")
inputcolumns1 = input("To:") 

file = open(csvfile)
unneeded_header = file.readline()

train_input = []
train_output = []
predict_list = []
lendictkeys = []
output = []
n = 0
percentage_dictionary = {'0-10':[],'10-20':[],'20-30':[],'30-40':[],'40-50':[],'50-60':[],'60-70':[],'70-80':[],'80-90':[],'90-100':[],'100+':[]}

#Read all lines of the csv file and forms two lists; train_input and train_output
for line in file:
  list = line.split(",")
  train_input.append([])
  for j in range(int(inputcolumns) - 1,int(inputcolumns1)):
    train_input[n].append(float(list[j]))
  n += 1
  output.append(list[int(predictioncol) - 1])

for elem in output: 
  train_output.append(elem.strip("\n"))

test_input = train_input[0:int(len(train_input)*0.2)]
test_output = train_output[0:int(len(train_input)*0.2)]

#Training the model
predictor = LinearRegression(n_jobs=-1)
predictor.fit(X=train_input, y=train_output)

#Using the model for prediction
for element in test_input:
  X_test = [element]
  outcome = predictor.predict(X=X_test)
  predict_list.append(outcome)

#Calculating the percentage error
for i in range(len(test_output)):
  perror = (abs((float(predict_list[i])-float(test_output[i])))/float(test_output[i])) * 100
  
  if 0 < perror < 10:
    percentage_dictionary['0-10'].append(int(perror))
  elif 10 < perror < 20:
    percentage_dictionary['10-20'].append(int(perror))
  elif 20 < perror < 30:
    percentage_dictionary['20-30'].append(int(perror))
  elif 30 < perror < 40:
    percentage_dictionary['30-40'].append(int(perror))
  elif 40 < perror < 50:
    percentage_dictionary['40-50'].append(int(perror))
  elif 50 < perror < 60:
    percentage_dictionary['50-60'].append(int(perror))
  elif 60 < perror < 70:
    percentage_dictionary['60-70'].append(int(perror))
  elif 70 < perror < 80:
    percentage_dictionary['70-80'].append(int(perror))
  elif 80 < perror < 90:
    percentage_dictionary['80-90'].append(int(perror))
  elif 90 < perror < 100:
    percentage_dictionary['90-100'].append(int(perror))
  else:
    percentage_dictionary['100+'].append(int(perror))

#Counts how many of the perdictions were within each range
for l in percentage_dictionary.keys():
  lendictkeys.append(len(percentage_dictionary[l]))

#Graphing the data
def drawbar(t,height):
  t.begin_fill()         
  t.left(90)
  t.forward(height)
  t.write(str(height))
  t.right(90)
  t.forward(40)
  t.right(90)
  t.forward(height)
  t.left(90)
  t.end_fill() 

maxheight = max(lendictkeys)
numbars = len(lendictkeys)
border = 10

wn = turtle.Screen()
wn.setworldcoordinates(0-border,0-border,40*numbars+border,maxheight+border)
wn.bgcolor("lightgreen")

tess = turtle.Turtle()
tess.color("blue")
tess.fillcolor("red")
tess.pensize(3)

for a in lendictkeys:
  drawbar(tess,a)

wn.exitonclick()
